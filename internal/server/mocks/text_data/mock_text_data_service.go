// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msmkdenis/yap-gophkeeper/internal/server/text_data/api/v1/grpchandlers (interfaces: TextDataService)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=internal/server/mocks/text_data/mock_text_data_service.go -package=mocks github.com/msmkdenis/yap-gophkeeper/internal/server/text_data/api/v1/grpchandlers TextDataService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/msmkdenis/yap-gophkeeper/internal/server/model"
	specification "github.com/msmkdenis/yap-gophkeeper/internal/server/text_data/specification"
	gomock "go.uber.org/mock/gomock"
)

// MockTextDataService is a mock of TextDataService interface.
type MockTextDataService struct {
	ctrl     *gomock.Controller
	recorder *MockTextDataServiceMockRecorder
}

// MockTextDataServiceMockRecorder is the mock recorder for MockTextDataService.
type MockTextDataServiceMockRecorder struct {
	mock *MockTextDataService
}

// NewMockTextDataService creates a new mock instance.
func NewMockTextDataService(ctrl *gomock.Controller) *MockTextDataService {
	mock := &MockTextDataService{ctrl: ctrl}
	mock.recorder = &MockTextDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextDataService) EXPECT() *MockTextDataServiceMockRecorder {
	return m.recorder
}

// LoadAllTextData mocks base method.
func (m *MockTextDataService) LoadAllTextData(arg0 context.Context, arg1 specification.TextDataSpecification) ([]model.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllTextData", arg0, arg1)
	ret0, _ := ret[0].([]model.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllTextData indicates an expected call of LoadAllTextData.
func (mr *MockTextDataServiceMockRecorder) LoadAllTextData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllTextData", reflect.TypeOf((*MockTextDataService)(nil).LoadAllTextData), arg0, arg1)
}

// SaveTextData mocks base method.
func (m *MockTextDataService) SaveTextData(arg0 context.Context, arg1 model.TextDataPostRequest) (model.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTextData", arg0, arg1)
	ret0, _ := ret[0].(model.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTextData indicates an expected call of SaveTextData.
func (mr *MockTextDataServiceMockRecorder) SaveTextData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTextData", reflect.TypeOf((*MockTextDataService)(nil).SaveTextData), arg0, arg1)
}
