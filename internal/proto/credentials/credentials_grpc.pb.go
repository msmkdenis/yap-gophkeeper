// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/proto/credentials/credentials.proto

package credentials

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CredentialsService_PostSaveCredentials_FullMethodName = "/proto.CredentialsService/PostSaveCredentials"
	CredentialsService_GetLoadCredentials_FullMethodName  = "/proto.CredentialsService/GetLoadCredentials"
)

// CredentialsServiceClient is the client API for CredentialsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialsServiceClient interface {
	PostSaveCredentials(ctx context.Context, in *PostCredentialsRequest, opts ...grpc.CallOption) (*PostCredentialsResponse, error)
	GetLoadCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
}

type credentialsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialsServiceClient(cc grpc.ClientConnInterface) CredentialsServiceClient {
	return &credentialsServiceClient{cc}
}

func (c *credentialsServiceClient) PostSaveCredentials(ctx context.Context, in *PostCredentialsRequest, opts ...grpc.CallOption) (*PostCredentialsResponse, error) {
	out := new(PostCredentialsResponse)
	err := c.cc.Invoke(ctx, CredentialsService_PostSaveCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsServiceClient) GetLoadCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, CredentialsService_GetLoadCredentials_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CredentialsServiceServer is the server API for CredentialsService service.
// All implementations must embed UnimplementedCredentialsServiceServer
// for forward compatibility
type CredentialsServiceServer interface {
	PostSaveCredentials(context.Context, *PostCredentialsRequest) (*PostCredentialsResponse, error)
	GetLoadCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
	mustEmbedUnimplementedCredentialsServiceServer()
}

// UnimplementedCredentialsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialsServiceServer struct {
}

func (UnimplementedCredentialsServiceServer) PostSaveCredentials(context.Context, *PostCredentialsRequest) (*PostCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveCredentials not implemented")
}
func (UnimplementedCredentialsServiceServer) GetLoadCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadCredentials not implemented")
}
func (UnimplementedCredentialsServiceServer) mustEmbedUnimplementedCredentialsServiceServer() {}

// UnsafeCredentialsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialsServiceServer will
// result in compilation errors.
type UnsafeCredentialsServiceServer interface {
	mustEmbedUnimplementedCredentialsServiceServer()
}

func RegisterCredentialsServiceServer(s grpc.ServiceRegistrar, srv CredentialsServiceServer) {
	s.RegisterService(&CredentialsService_ServiceDesc, srv)
}

func _CredentialsService_PostSaveCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServiceServer).PostSaveCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialsService_PostSaveCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServiceServer).PostSaveCredentials(ctx, req.(*PostCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialsService_GetLoadCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsServiceServer).GetLoadCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CredentialsService_GetLoadCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsServiceServer).GetLoadCredentials(ctx, req.(*GetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CredentialsService_ServiceDesc is the grpc.ServiceDesc for CredentialsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CredentialsService",
	HandlerType: (*CredentialsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSaveCredentials",
			Handler:    _CredentialsService_PostSaveCredentials_Handler,
		},
		{
			MethodName: "GetLoadCredentials",
			Handler:    _CredentialsService_GetLoadCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/credentials/credentials.proto",
}
