// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/proto/binary_data/binary_data.proto

package binary_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BinaryDataService_PostSaveBinaryData_FullMethodName = "/proto.BinaryDataService/PostSaveBinaryData"
	BinaryDataService_GetLoadBinaryData_FullMethodName  = "/proto.BinaryDataService/GetLoadBinaryData"
)

// BinaryDataServiceClient is the client API for BinaryDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryDataServiceClient interface {
	PostSaveBinaryData(ctx context.Context, in *PostBinaryDataRequest, opts ...grpc.CallOption) (*PostBinaryDataResponse, error)
	GetLoadBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error)
}

type binaryDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryDataServiceClient(cc grpc.ClientConnInterface) BinaryDataServiceClient {
	return &binaryDataServiceClient{cc}
}

func (c *binaryDataServiceClient) PostSaveBinaryData(ctx context.Context, in *PostBinaryDataRequest, opts ...grpc.CallOption) (*PostBinaryDataResponse, error) {
	out := new(PostBinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_PostSaveBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryDataServiceClient) GetLoadBinaryData(ctx context.Context, in *GetBinaryDataRequest, opts ...grpc.CallOption) (*GetBinaryDataResponse, error) {
	out := new(GetBinaryDataResponse)
	err := c.cc.Invoke(ctx, BinaryDataService_GetLoadBinaryData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryDataServiceServer is the server API for BinaryDataService service.
// All implementations must embed UnimplementedBinaryDataServiceServer
// for forward compatibility
type BinaryDataServiceServer interface {
	PostSaveBinaryData(context.Context, *PostBinaryDataRequest) (*PostBinaryDataResponse, error)
	GetLoadBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error)
	mustEmbedUnimplementedBinaryDataServiceServer()
}

// UnimplementedBinaryDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryDataServiceServer struct {
}

func (UnimplementedBinaryDataServiceServer) PostSaveBinaryData(context.Context, *PostBinaryDataRequest) (*PostBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSaveBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) GetLoadBinaryData(context.Context, *GetBinaryDataRequest) (*GetBinaryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBinaryData not implemented")
}
func (UnimplementedBinaryDataServiceServer) mustEmbedUnimplementedBinaryDataServiceServer() {}

// UnsafeBinaryDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryDataServiceServer will
// result in compilation errors.
type UnsafeBinaryDataServiceServer interface {
	mustEmbedUnimplementedBinaryDataServiceServer()
}

func RegisterBinaryDataServiceServer(s grpc.ServiceRegistrar, srv BinaryDataServiceServer) {
	s.RegisterService(&BinaryDataService_ServiceDesc, srv)
}

func _BinaryDataService_PostSaveBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).PostSaveBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_PostSaveBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).PostSaveBinaryData(ctx, req.(*PostBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryDataService_GetLoadBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryDataServiceServer).GetLoadBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryDataService_GetLoadBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryDataServiceServer).GetLoadBinaryData(ctx, req.(*GetBinaryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryDataService_ServiceDesc is the grpc.ServiceDesc for BinaryDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BinaryDataService",
	HandlerType: (*BinaryDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostSaveBinaryData",
			Handler:    _BinaryDataService_PostSaveBinaryData_Handler,
		},
		{
			MethodName: "GetLoadBinaryData",
			Handler:    _BinaryDataService_GetLoadBinaryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/binary_data/binary_data.proto",
}
